// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ACLUSTEREDSTATICMODEL_MRC_H_
#define FLATBUFFERS_GENERATED_ACLUSTEREDSTATICMODEL_MRC_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 1 &&
              FLATBUFFERS_VERSION_REVISION == 24,
             "Non-compatible flatbuffers version included");

namespace Mrc {

struct Vertex;
struct VertexBuilder;

struct Cluster;
struct ClusterBuilder;

struct Node;
struct NodeBuilder;

struct ClusteredStaticModel;
struct ClusteredStaticModelBuilder;

struct Vertex FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef VertexBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POSITION = 4,
    VT_NORMAL = 6,
    VT_UV = 8
  };
  const ::flatbuffers::Vector<float> *position() const {
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_POSITION);
  }
  const ::flatbuffers::Vector<float> *normal() const {
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_NORMAL);
  }
  const ::flatbuffers::Vector<float> *uv() const {
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_UV);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_POSITION) &&
           verifier.VerifyVector(position()) &&
           VerifyOffset(verifier, VT_NORMAL) &&
           verifier.VerifyVector(normal()) &&
           VerifyOffset(verifier, VT_UV) &&
           verifier.VerifyVector(uv()) &&
           verifier.EndTable();
  }
};

struct VertexBuilder {
  typedef Vertex Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_position(::flatbuffers::Offset<::flatbuffers::Vector<float>> position) {
    fbb_.AddOffset(Vertex::VT_POSITION, position);
  }
  void add_normal(::flatbuffers::Offset<::flatbuffers::Vector<float>> normal) {
    fbb_.AddOffset(Vertex::VT_NORMAL, normal);
  }
  void add_uv(::flatbuffers::Offset<::flatbuffers::Vector<float>> uv) {
    fbb_.AddOffset(Vertex::VT_UV, uv);
  }
  explicit VertexBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Vertex> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Vertex>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Vertex> CreateVertex(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<float>> position = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<float>> normal = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<float>> uv = 0) {
  VertexBuilder builder_(_fbb);
  builder_.add_uv(uv);
  builder_.add_normal(normal);
  builder_.add_position(position);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Vertex> CreateVertexDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<float> *position = nullptr,
    const std::vector<float> *normal = nullptr,
    const std::vector<float> *uv = nullptr) {
  auto position__ = position ? _fbb.CreateVector<float>(*position) : 0;
  auto normal__ = normal ? _fbb.CreateVector<float>(*normal) : 0;
  auto uv__ = uv ? _fbb.CreateVector<float>(*uv) : 0;
  return Mrc::CreateVertex(
      _fbb,
      position__,
      normal__,
      uv__);
}

struct Cluster FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ClusterBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VERTICES = 4,
    VT_INDICES = 6
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<Mrc::Vertex>> *vertices() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Mrc::Vertex>> *>(VT_VERTICES);
  }
  const ::flatbuffers::Vector<uint32_t> *indices() const {
    return GetPointer<const ::flatbuffers::Vector<uint32_t> *>(VT_INDICES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VERTICES) &&
           verifier.VerifyVector(vertices()) &&
           verifier.VerifyVectorOfTables(vertices()) &&
           VerifyOffset(verifier, VT_INDICES) &&
           verifier.VerifyVector(indices()) &&
           verifier.EndTable();
  }
};

struct ClusterBuilder {
  typedef Cluster Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_vertices(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mrc::Vertex>>> vertices) {
    fbb_.AddOffset(Cluster::VT_VERTICES, vertices);
  }
  void add_indices(::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> indices) {
    fbb_.AddOffset(Cluster::VT_INDICES, indices);
  }
  explicit ClusterBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Cluster> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Cluster>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Cluster> CreateCluster(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mrc::Vertex>>> vertices = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> indices = 0) {
  ClusterBuilder builder_(_fbb);
  builder_.add_indices(indices);
  builder_.add_vertices(vertices);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Cluster> CreateClusterDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<Mrc::Vertex>> *vertices = nullptr,
    const std::vector<uint32_t> *indices = nullptr) {
  auto vertices__ = vertices ? _fbb.CreateVector<::flatbuffers::Offset<Mrc::Vertex>>(*vertices) : 0;
  auto indices__ = indices ? _fbb.CreateVector<uint32_t>(*indices) : 0;
  return Mrc::CreateCluster(
      _fbb,
      vertices__,
      indices__);
}

struct Node FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef NodeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CLUSTERS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<Mrc::Cluster>> *clusters() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Mrc::Cluster>> *>(VT_CLUSTERS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CLUSTERS) &&
           verifier.VerifyVector(clusters()) &&
           verifier.VerifyVectorOfTables(clusters()) &&
           verifier.EndTable();
  }
};

struct NodeBuilder {
  typedef Node Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_clusters(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mrc::Cluster>>> clusters) {
    fbb_.AddOffset(Node::VT_CLUSTERS, clusters);
  }
  explicit NodeBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Node> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Node>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Node> CreateNode(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mrc::Cluster>>> clusters = 0) {
  NodeBuilder builder_(_fbb);
  builder_.add_clusters(clusters);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Node> CreateNodeDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<Mrc::Cluster>> *clusters = nullptr) {
  auto clusters__ = clusters ? _fbb.CreateVector<::flatbuffers::Offset<Mrc::Cluster>>(*clusters) : 0;
  return Mrc::CreateNode(
      _fbb,
      clusters__);
}

struct ClusteredStaticModel FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ClusteredStaticModelBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NODES = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<Mrc::Node>> *nodes() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Mrc::Node>> *>(VT_NODES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NODES) &&
           verifier.VerifyVector(nodes()) &&
           verifier.VerifyVectorOfTables(nodes()) &&
           verifier.EndTable();
  }
};

struct ClusteredStaticModelBuilder {
  typedef ClusteredStaticModel Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_nodes(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mrc::Node>>> nodes) {
    fbb_.AddOffset(ClusteredStaticModel::VT_NODES, nodes);
  }
  explicit ClusteredStaticModelBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ClusteredStaticModel> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ClusteredStaticModel>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ClusteredStaticModel> CreateClusteredStaticModel(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mrc::Node>>> nodes = 0) {
  ClusteredStaticModelBuilder builder_(_fbb);
  builder_.add_nodes(nodes);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ClusteredStaticModel> CreateClusteredStaticModelDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<Mrc::Node>> *nodes = nullptr) {
  auto nodes__ = nodes ? _fbb.CreateVector<::flatbuffers::Offset<Mrc::Node>>(*nodes) : 0;
  return Mrc::CreateClusteredStaticModel(
      _fbb,
      nodes__);
}

inline const Mrc::ClusteredStaticModel *GetClusteredStaticModel(const void *buf) {
  return ::flatbuffers::GetRoot<Mrc::ClusteredStaticModel>(buf);
}

inline const Mrc::ClusteredStaticModel *GetSizePrefixedClusteredStaticModel(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Mrc::ClusteredStaticModel>(buf);
}

inline bool VerifyClusteredStaticModelBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Mrc::ClusteredStaticModel>(nullptr);
}

inline bool VerifySizePrefixedClusteredStaticModelBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Mrc::ClusteredStaticModel>(nullptr);
}

inline void FinishClusteredStaticModelBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Mrc::ClusteredStaticModel> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedClusteredStaticModelBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Mrc::ClusteredStaticModel> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Mrc

#endif  // FLATBUFFERS_GENERATED_ACLUSTEREDSTATICMODEL_MRC_H_
